# Imports
from imports import *
from helpers import *
from constants import *

class TranscriptomeIndex:
    """
    Class which contains the functionality required to
    generate a reference transcriptome for kallisto. 

        :attribute _process_dir (str): The dir which contains all the files required for this process.
        :attribute _logfile (str): The path to the log file.
        :attribute _accession (str): The accession number of the reference transcriptome.
        :attribute _cds_count (str): The number of coding sequences found in the reference transcriptome. 
    """
    def __init__(self): 
        """
        Instantiates a TranscriptomeIndex object.
        """
        # Presetting the TranscriptomeIndex class variables. 
        self._process_dir = f"{Constants.PROCESSED_FOLDER}/transcriptomeindex/"
        self._logfile = f"{Constants.LOG_FOLDER}/{Constants.LOG_FILE}"
        self._accession = ""
        self._cds_count = 0

    def obtain_transcriptome(self, accession: str):
        """
        Given an accession number, obtains the reference transcriptome sequence
        from NCBI for kallisto and writes the CDS to a separate .fasta file. It
        also counts the number of CDS in the reference transcriptome.
        The reference transcriptome accession number is passed to this function
        by the main() function (which is passed to main as an argument in the terminal).

        :param accesion (str): The accession number to use for the reference transcriptome.
        """
        # Creating the fasta files to store the transcriptome. 
        self._accession = accession
        transcription_fasta = open(f"{self._process_dir}{self._accession}.fasta", "w")
        cds_fasta = open(f"{self._process_dir}{self._accession}_CDS.fasta", "w")

        # Using the Entrez package in order to obtain the fasta file associated with the accession number.
        Entrez.email = "ecacayan@luc.edu"
        handle = Entrez.efetch(db = "nucleotide", id = self._accession, rettype = "fasta")
        records = list(SeqIO.parse(handle, "fasta"))
        
        # Writing to the fasta file which contains the entire reference genome sequence.
        transcription_fasta.write(f"> {str(records[0].description)}\n{str(records[0].seq)}")
        transcription_fasta.close()

        # Obtaining the CDS of the transcriptome by indexing using genbank and counting how many times
        # the string "CDS" appears in feature.type.
        gb_handle = Entrez.efetch(db = "nucleotide", id = self._accession, rettype = "gb", retmode = "text")
        for record in SeqIO.parse(gb_handle, "genbank"):
            for feature in record.features:
                if feature.type == "CDS":
                    self._cds_count += 1
                    ident = str(feature.qualifiers['protein_id']).replace("[", "").replace("]", "").replace("\'", "")
                    sequence = str(feature.location.extract(record).seq)
                    cds_fasta.write(f">{ident}\n{sequence}\n")
        cds_fasta.close()
    
    def build_idx(self):
        """
        Using the .fasta files generated by obtain_transcriptome(), this function
        builds the transcriptome index file for kallisto. 
        """

        # Using the _CDS.fasta file to build the index for kallisto. 
        kallisto_idx = f"kallisto index -i processed_data/kallisto/index.idx {self._process_dir}/{self._accession}_CDS.fasta >> processed_data/output_log/output.txt 2>&1"
        os.system(f"{kallisto_idx}")
    
    def print_log(self):
        """
        Prints the appropriate output associated with this
        class to PipelineProject.log. 
        """
        # Changing the directory to the log file. 
        os.chdir(Constants.LOG_FOLDER)

        # Writing to the log file how many CDS's were found in the reference transcriptome and then leaving the directory. 
        with open(Constants.LOG_FILE, "a") as log:
            log.write(f"--CDS Feature Extraction--\nThe HCMV genome ({self._accession}) has {self._cds_count} CDS.\n\n")
        os.chdir("..")

